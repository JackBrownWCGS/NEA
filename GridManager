using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using CodeMonkey.Utils;
using System;

public class GridManager : MonoBehaviour
{
    public Sprite sprite;
    private int[,] Grid;
    private int[,] Grid2;
    private int cellSize = 1;
    private int vert, horiz, cols, rows;
    private int flag = 0;
    private int cellcount = 50;
    public int neighbours = 0;


    // Start is called before the first frame update
    void Start()
    {
        vert = (int)Camera.main.orthographicSize;
        horiz = vert * Screen.width / Screen.height;
        cols = 20;
        rows = 20;
        Grid = new int[cols, rows * 2];
        Grid2 = new int[cols, rows * 2];
    }

    // Gets position of mouse when mouse clicks, used to see what is being clicked on
    private void Update()
    {
        if (Input.GetMouseButtonDown(0))
        {
            Manual(UtilsClass.GetMouseWorldPosition());
        }
    }

    //reads the Dropdown Menu and sets the cellcount at the selected value
    public void CellCounter(int val)
    {
        switch (val)
        {
            case 0:
                cellcount = 50;
                break;
            case 1:
                cellcount = 75;
                break;
            case 2:
                cellcount = 100;
                break;
        }

        Debug.Log("cellcount = " + cellcount);
    }

    // Generates a blank board, for the manual placing of cells
    public void Generate()
    {
        flag = 1;
        for (int i = 0; i < cols; i++)
        {
            for (int j = 0; j < rows; j++)
            {
                Grid[i, j] = 0;
                SpawnTile(i, j, Grid[i, j]);
            }
        }
    }

    // Generates a random but symmetrical board for players to use
    public void Randomise()
    {
        rows = rows / 2;
        for (int i = 0; i < cols; i++)
        {
            for (int j = 0; j < rows; j++)
            {
                Grid[i, j] = UnityEngine.Random.Range(0, 2);
                SpawnTile(i, j, Grid[i, j]);
            }
        }
        for (int i = 0; i < cols; i++)
        {
            for (int j = 0; j < rows; j++)
            {
                Grid[i, rows + j] = Grid[i, rows - j - 1];
                SpawnTile(i, j + rows, Grid[i, j + rows]);
                
            }
        }
        rows = rows * 2;
    }

    // Allows for the player to manually add 'live' cells to the board
    public int counter = 0;
    private void Manual(Vector3 worldPosition)
    {
        if(flag == 1)
        {

            int x, y;
            GetXY(worldPosition, out x, out y);
            if (x >= 0 && x <= 19 && y <= 19 && y >= 0 && counter < cellcount)
            { 
                SetValue(x, y);
            }
            else
            {
                string xs = x.ToString();
                string ys = y.ToString();
                Debug.Log("x = " + xs);
                Debug.Log("y = " + ys);
            }
        }
    }

    // Gets the Position of the mouse in relation to the grid
    private void GetXY(Vector3 worldPosition, out int x, out int y)
    {
        x = Mathf.FloorToInt(worldPosition.x + horiz);
        y = Mathf.FloorToInt(worldPosition.y + vert);
    }

    // Used in the manual placement of the cells on the board
    private void SetValue(int x, int y)
    {
        if (Grid[x, y] == 1)
        {
            Grid[x, y] = 0;
            counter--;
        }
        else
        { 
            Grid[x, y] = 1;
            counter++;
        }
        SpawnTile(x, y, Grid[x, y]);
        Debug.Log("counter = " + counter);

    }

    //Spawns in the tiles for the visible grid.
    private void SpawnTile(int x, int y, int value)
    {
        GameObject g = new GameObject("x: " + x + "y: " + y);
        g.transform.position = new Vector3(x - (horiz - 0.5f), y - (vert - 0.5f));
        var s = g.AddComponent<SpriteRenderer>();
        s.sprite = sprite;
        if (value == 0)
        {
            s.color = new Color(255, 255, 255);
        }
        if (value == 1)
        {
            s.color = new Color(0, 0, 0);
        }
    }

    public void IterationUpdate()
    {
        Array.Copy(Grid, Grid2, Grid.Length);
        for (int i = 0; i < cols; i++)
        {
            for (int j = 0; j < rows; j++)
            {
                if (i == 0 && j == 0)
                {
                    if (Grid[i + 1, j] == 1) neighbours = neighbours + 1;
                    if (Grid[i, j + 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i + 1, j + 1] == 1) neighbours = neighbours + 1;
                }
                else if (i == 0 && j == 19)
                {
                    if (Grid[i + 1, j] == 1) neighbours = neighbours + 1;
                    if (Grid[i, j - 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i + 1, j - 1] == 1) neighbours = neighbours + 1;
                }
                else if (i == 0)
                {
                    if (Grid[i + 1, j] == 1) neighbours = neighbours + 1;
                    if (Grid[i, j - 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i, j + 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i + 1, j - 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i + 1, j + 1] == 1) neighbours = neighbours + 1;
                }
                else if (i == 19 && j == 0)
                {
                    if (Grid[i - 1, j] == 1) neighbours = neighbours + 1;
                    if (Grid[i, j + 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i - 1, j + 1] == 1) neighbours = neighbours + 1;
                }
                else if (i == 19 && j == 19)
                {
                    if (Grid[i - 1, j] == 1) neighbours = neighbours + 1;
                    if (Grid[i, j - 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i - 1, j - 1] == 1) neighbours = neighbours + 1;
                }
                else if (i == 19)
                {
                    if (Grid[i - 1, j] == 1) neighbours = neighbours + 1;
                    if (Grid[i, j - 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i, j + 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i - 1, j - 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i - 1, j + 1] == 1) neighbours = neighbours + 1;
                }
                else if (j == 0)
                {
                    if (Grid[i - 1, j] == 1) neighbours = neighbours + 1;
                    if (Grid[i + 1, j] == 1) neighbours = neighbours + 1;
                    if (Grid[i, j + 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i + 1, j + 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i - 1, j + 1] == 1) neighbours = neighbours + 1;
                }
                else if (j == 19)
                {
                    if (Grid[i - 1, j] == 1) neighbours = neighbours + 1;
                    if (Grid[i, j - 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i + 1, j] == 1) neighbours = neighbours + 1;
                    if (Grid[i - 1, j - 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i + 1, j - 1] == 1) neighbours = neighbours + 1;

                }
                else
                {
                    if (Grid[i - 1, j] == 1) neighbours = neighbours + 1;
                    if (Grid[i, j - 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i + 1, j] == 1) neighbours = neighbours + 1;
                    if (Grid[i, j + 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i - 1, j - 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i + 1, j + 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i + 1, j - 1] == 1) neighbours = neighbours + 1;
                    if (Grid[i - 1, j + 1] == 1) neighbours = neighbours + 1;
                }

                if (Grid[i, j] == 0 && neighbours == 3) Grid2[i, j] = 1;
                else if (Grid[i, j] == 1 && neighbours == 2) Grid2[i, j] = 1;
                else if (Grid[i, j] == 1 && neighbours == 3) Grid2[i, j] = 1;
                else Grid2[i, j] = 0;

                Debug.Log("x = " + i + "y = " + j + "Neighbours = " + neighbours);
                neighbours = 0;
            }
        }
        Array.Copy(Grid2, Grid, Grid.Length);
        for (int k = 0; k < cols; k++)
        {
            for (int l = 0; l < rows; l++)
            {
                SpawnTile(k, l, Grid[k, l]);
            }
        }
    }
    public void NextIteration()
    {
        Debug.Log("test");
    }
}
